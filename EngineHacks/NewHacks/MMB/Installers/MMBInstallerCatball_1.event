
#ifndef MODULAR_MMB
	#define MODULAR_MMB

	MESSAGE MMB code begins at CURRENTOFFSET

/*

Comment out (by typing // before a line's #define) or delete module options you don't want.

After each set of module options are definitions that you can use to adjust the module.

*/

PUSH
ORG 0x08D0AC
POIN MMBHpBarImage
POP

PUSH
ORG 0x08D0C4
POIN MMBNumberPalette
POP

// mmb faction palettes
PUSH
ORG 0x08C2EC
POIN PurpleMenuPalette
ORG 0x08C2F4
POIN RedMenuPalette
ORG 0x08C2FC
POIN GreenMenuPalette
POP

ALIGN 4
MMBHpBarImage:
#incbin "hpbarss.dmp"

ALIGN 4
MMBNumberPalette:
BYTE $0E $52 $FF $7F $BE $5F $84 $10 $AA $00 $E7 $1C $DC $77 $99 $73 $56 $6B $12 $67 $2D $56 $EC $51 $AA $4D $69 $49 $28 $45 $E7 $40

// Some helper definitions:

#define TextWhite  0
#define TextGray   1
#define TextBlue   2
#define TextYellow 3
#define TextGreen  4
#define TextBlack  5

// Tilemap modules

	#define MMBStandardTilemap
		/*
		 * This draws the background tilemap of
		 * the minimug box.
		 */

// Tilemap options

	// In 8x8 pixel tiles
	#define MMBHeight 8
	#define MMBWidth 19
	#define MMBTilemapPaletteIndex 3

	ALIGN 4

	MMBTilemap:
	BYTE (MMBWidth - 1) (MMBHeight - 1) // Don't touch these

	// Edit this as you see fit
	// The tilemap is 'upside-down' with the bottom row being first
	// and the top row being last

	SHORT $1A $1B $1C $1C $1C $1C $1C $1C $1C $1C $1C $1C $1C $1C $1C $1C $1D $1E $1F // Row 8 (Bottom)
	SHORT $06 $09 $09 $2B $2C $2C $2C $2C $2C $2D $09 $09 $09 $09 $40 $42 $44 $44 $45 // Row 7
	SHORT $06 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $40 $42 $44 $45 // Row 6
	SHORT $06 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $40 $42 $43 // Row 5
	SHORT $06 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $40 $41 // Row 4
	SHORT $06 $09 $09 $09 $09 $2B $2C $2C $2C $2C $2D $09 $09 $09 $09 $09 $09 $09 $0A // Row 3
	SHORT $14 $15 $16 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $09 $0A // Row 2
	SHORT $10 $11 $12 $13 $03 $03 $03 $03 $03 $03 $03 $03 $03 $03 $03 $03 $03 $04 $05 // Rows 1 (Top)

	ALIGN 4

// Unit name modules

	#define MMBName
		/*
		 * Draws the unit's name to [MMBNameX, MMBNameY]
		 * using MMBNameColor.
		 */

	//#define MMBNameCentered
		/*
		 * Draws the unit's name to [MMBNameX, MMBNameY]
		 * using MMBNameColor, centering it within the
		 * number of tiles specified by MMBNameWidth.
		 */

	//#define MMBNameAffinityShifted
		/*
		 * Draws the unit's name to [MMBNameX, MMBNameY]
		 * using MMBNameColor. If the unit has an affinity,
		 * the name is shifted 2 tiles to the right.
		 */

// Unit name options

	// Coordinates and widths are in 8x8 pixel tiles
	#define MMBNameWidth 7
	#define MMBNameColor TextWhite
	#define MMBNameX 5
	#define MMBNameY 1

// Minimug modules

	//#define MMBMinimug
		/*
		 * Draws the unit's minimug to [MMBMinimugX, MMBMinimugY].
		 */

	#define MMBMinimugEnemyFlip
		/*
		 * Draws the unit's minimug to [MMBMinimugX, MMBMinimugY].
		 * Enemies have thier minimugs horizontally flipped.
		 */

// Minimug options

	// Coordinates are in 8x8 pixel tiles
	#define MMBMinimugX 1
	#define MMBMinimugY 1
	#define MMBMinimugTileIndexStart 0xF0
	#define MMBMinimugPaletteIndex 4

// Inventory modules

	// Only one of these modules may be selected
	// at a time. Incompatible with the individual
	// item modules.

	//#define MMBFullInventory
		/*
		 * Draws the unit's full inventory starting at
		 * [MMBInventoryX, MMBInventoryY] and drawing
		 * icons past the first to [MMBInventoryX+(16*n), MMBInventoryY].
		 */

	//#define MMBEquippedWeapon
		/*
		 * Draws a unit's equipped weapon, if they have one,
		 * to [MMBInventoryX, MMBInventoryY].
		 */

	//#define MMBEquippedWeaponOrFirstStaff
		/*
		 * Draws a unit's equipped weapon, if they have one,
		 * to [MMBInventoryX, MMBInventoryY]. If the unit does
		 * not have a weapon equipped, it tries to display
		 * first first usable staff in the unit's inventory.
		 */

	//#define MMBEquippedWeaponIfPlayerOrInventory
		/*
		 * If the unit is a player unit, functions as MMBEquippedWeapon.
		 * If they are not a player unit, functions as MMBFullInventory.
		 */

	//#define MMBEquippedWeaponOrFirstStaffIfPlayerOrInventory
		/*
		 * If the unit is a player unit, functions as MMBEquippedWeaponOrFirstStaff.
		 * If they are not a player unit, functions as MMBFullInventory.
		 */

// Individual item modules

	// Any combination of these modules may be selected.
	// Incompatible with the inventory modules

	//#define MMBItem1
	//#define MMBItem2
	//#define MMBItem3
	//#define MMBItem4
	//#define MMBItem5
		/*
		 * Draws the item in the specified item slot to
		 * [MMBItem#X, MMBItem#Y] if there is an item in
		 * that slot.
		 */

	//#define MMBItem1Alternate
	//#define MMBItem2Alternate
	//#define MMBItem3Alternate
	//#define MMBItem4Alternate
	//#define MMBItem5Alternate
		/*
		 * Draws an icon to [MMBInventoryAlternateX, MMBInventoryAlternateY]
		 * cycling between all selected items. Each is shown for 64 frames.
		 */

// Item name modules

	// Only one of these modules may be selected
	// at a time. Each one uses the alt text.

	//#define MMBEquippedWeaponName
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor.
		 */

	//#define MMBEquippedWeaponOrFirstStaffName
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor. If the unit does not have a
		 * weapon equipped, tries to draw the first
		 * equippable staff's name.
		 */

	//#define MMBEquippedWeaponNameCentered
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor. The text is centered within the
		 * space specified by MMBAltTextWidth.
		 */

	//#define MMBEquippedWeaponOrFirstStaffNameCentered
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor. If the unit does not have a
		 * weapon equipped, tries to draw the first
		 * equippable staff's name. The text is centered
		 * within the space specified by MMBAltTextWidth.
		 */

	//#define MMBEquippedWeaponNameIfPlayer
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor if the unit is a player unit.
		 */

	//#define MMBEquippedWeaponOrFirstStaffNameIfPlayer
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor if the unit is a player unit.
		 * If the unit does not have a weapon equipped,
		 * tries to draw the first equippable staff's name.
		 */

	//#define MMBEquippedWeaponNameIfPlayerCentered
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor if the unit is a player unit.
		 * The text is centered within the
		 * space specified by MMBAltTextWidth.
		 */

	//#define MMBEquippedWeaponOrFirstStaffNameIfPlayerCentered
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY] using
		 * MMBTextAltColor if the unit is a player unit.
		 * If the unit does not have a weapon equipped,
		 * tries to draw the first equippable staff's name.
		 * The text is centered within the
		 * space specified by MMBAltTextWidth.
		 */

	//#define MMBEquippedWeaponOrFirstStaffNameWithWarning
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY].
		 * If the unit does not have a weapon equipped,
		 * tries to draw the first equippable staff's name.
		 * The text is drawn using MMBTextWarningColor
		 * if its durability is at or below
		 * MMBItemDurabilityThreshold percent of its max
		 * durability, otherwise it is drawn using
		 * MMBTextAltColor.
		 */

	//#define MMBEquippedWeaponNameWithWarningCentered
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY].
		 * The text is drawn using MMBTextWarningColor
		 * if its durability is at or below
		 * MMBItemDurabilityThreshold percent of its max
		 * durability, otherwise it is drawn using
		 * MMBTextAltColor. The text is centered within the
		 * space specified by MMBAltTextWidth.
		 */

	//#define MMBEquippedWeaponOrFirstStaffNameWithWarningCentered
		/*
		 * Draws the equipped weapon's name, if any,
		 * to [MMBInventoryTextX, MMBInventoryTextY].
		 * If the unit does not have a weapon equipped,
		 * tries to draw the first equippable staff's name.
		 * The text is drawn using MMBTextWarningColor
		 * if its durability is at or below
		 * MMBItemDurabilityThreshold percent of its max
		 * durability, otherwise it is drawn using
		 * MMBTextAltColor. The text is centered within the
		 * space specified by MMBAltTextWidth.
		 */

// Inventory combination modules

	// Only one of these modules may be selected
	// at a time. Each one uses the alt text.

	//#define MMBEquippedWeaponAndName
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeapon
		 * #define MMBEquippedWeaponName
		 */

	#define MMBEquippedWeaponOrFirstStaffAndName
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponOrFirstStaff
		 * #define MMBEquippedWeaponOrFirstStaffName
		 */

	//#define MMBEquippedWeaponAndNameCentered
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeapon
		 * #define MMBEquippedWeaponNameCentered
		 */

	//#define MMBEquippedWeaponOrFirstStaffAndNameCentered
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponOrFirstStaff
		 * #define MMBEquippedWeaponOrFirstStaffNameCentered
		 */

	//#define MMBEquippedWeaponAndNameIfPlayerOrInventory
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponNameIfPlayer
		 * #define MMBEquippedWeaponIfPlayerOrInventory
		 */

	//#define MMBEquippedWeaponOrFirstStaffAndNameIfPlayerOrInventory
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponOrFirstStaffNameIfPlayer
		 * #define MMBEquippedWeaponIfPlayerOrInventory
		 */

	//#define MMBEquippedWeaponAndNameIfPlayerCenteredOrInventory
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponNameIfPlayerCentered
		 * #define MMBEquippedWeaponIfPlayerOrInventory
		 */

	//#define MMBEquippedWeaponOrFirstStaffAndNameIfPlayerCenteredOrInventory
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponOrFirstStaffNameIfPlayerCentered
		 * #define MMBEquippedWeaponOrFirstStaffIfPlayerOrInventory
		 */

	//#define MMBEquippedWeaponAndNameWithWarning
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeapon
		 * #define MMBEquippedWeaponNameWithWarning
		 */

	//#define MMBEquippedWeaponOrFirstStaffAndNameWithWarning
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponOrFirstStaff
		 * #define MMBEquippedWeaponOrFirstStaffNameWithWarning
		 */

	//#define MMBEquippedWeaponAndNameWithWarningCentered
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeapon
		 * #define MMBEquippedWeaponNameWithWarningCentered
		 */

	//#define MMBEquippedWeaponOrFirstStaffAndNameWithWarningCentered
		/*
		 * Shorthand for:
		 * #define MMBEquippedWeaponOrFirstStaff
		 * #define MMBEquippedWeaponOrFirstStaffNameWithWarningCentered
		 */

// Inventory options

	#define MMBInventoryObjectPaletteIndex 4

	#define MMBInventoryTileIndex 0x300

	// Coordinates are in pixels
	#define MMBInventoryX 8
	#define MMBInventoryY 40

	#define MMBItem1X 84
	#define MMBItem1Y 24

	#define MMBItem2X 100
	#define MMBItem2Y 24

	#define MMBItem3X 116
	#define MMBItem3Y 24

	#define MMBItem4X 132
	#define MMBItem4Y 24

	#define MMBItem5X 148
	#define MMBItem5Y 24

	#define MMBInventoryAlternateX 84
	#define MMBInventoryAlternateY 24

	// Used for item text
	// Coordinates are in 8x8 pixel tiles
	#define MMBInventoryTextX 3
	#define MMBInventoryTextY 5
	#define MMBAltTextWidth 7
	#define MMBTextAltColor TextWhite

	#define MMBTextWarningColor TextYellow

	#define MMBItemDurabilityThreshold 50 // percent of max durability

// Combination modules

	//#define MMBHPStatus
		/*
		 * Alternates between drawing HP. ## / ##
		 * and the unit's current status, if they have one,
		 * to [MMBHPStatusX, MMBHPStatusY] every 64 frames.
		 */

	//#define MMBDEFRES
		/*
		 * Alternates between drawing DEF ## and
		 * RES ## to [MMBDEFRESX, MMBDEFRESY] every 64
		 * frames.
		 */

	//#define MMBAVODOD
		/*
		 * Alternates between drawing AVO ## and
		 * DOD ## to [MMBAVODODX, MMBAVODODY] every 64
		 * frames.
		 */

	#define MMBHP
		/*
		 * Draws HP ## / ## to [MMBHPX, MMBHPY].
		 */

// Combination options

	// Coordinates are in 8x8 pixel tiles

	// HP/Status options
	#define MMBHPStatusX 11
	#define MMBHPStatusY 1

	// HP options
	#define MMBHPX 11
	#define MMBHPY 1

	// DEF/RES options
	//#define MMBDEFRESX 13
	//#define MMBDEFRESY 3
	//#define MMBDEFRESVRAMTile 0x10A
	//#define MMBDEFRESPaletteIndex 2

	// AVO/DOD options
	//#define MMBAVODODX 13
	//#define MMBAVODODY 4
	//#define MMBAVODODVRAMTile 0x104
	//#define MMBAVODODPaletteIndex 2

// Bar modules

	#define MMBHPBar
		/*
		 * Draws a HP bar of tile width MMBHPBarTileWidth
		 * to [MMBHPBarX, MMBHPBarY].
		 */

	//#define MMBHPBarStatus
		/*
		 * Alternates between a HP bar of tile width
		 * MMBHPBarTileWidth and the unit's status, if
		 * they have one, to [MMBHPBarX, MMBHPBarY].
		 */

// Bar options

	// Coordinates and widths are in 8x8 pixel tiles

	// HP bar options
	#define MMBHPBarX 11
	#define MMBHPBarY 2
	#define MMBHPBarTileWidth 7
	#define MMBHPBarBase 0x1140

// Affinity modules

	//#define MMBAffinity
		/*
		 * Draws the unit's affinity, if they
		 * have one, to [MMBAffinityX, MMBAffinityY].
		 */

// Affinity options

	// Coordinates are in pixels

	#define MMBAffinityX 40
	#define MMBAffinityY 24
	#define MMBAffinityTile 0x30A

// Skills modules (requires skill system)

	//#define MMBFullSkills
		/*
		 * Draws the unit's full skill list starting at
		 * [MMBSkillsX, MMBSkillsY] and drawing
		 * icons past the first to [MMBSkillsX+(16*n), MMBSkillsY].
		 * Overrides the MMBSkill# modules.
		 */

	//#define MMBSkill1
	//#define MMBSkill2
	//#define MMBSkill3
	//#define MMBSkill4
	//#define MMBSkill5
	//#define MMBSkill6
		/*
		 * Draws the skill in the specified skill slot to
		 * [MMBSkill#X, MMBSkill#Y] if there is an skill in
		 * that slot.
		 */

	//#define MMBSkill1Alternate
	//#define MMBSkill2Alternate
	//#define MMBSkill3Alternate
	//#define MMBSkill4Alternate
	//#define MMBSkill5Alternate
	//#define MMBSkill6Alternate
		/*
		 * Draws an icon to [MMBSkillsAlternateX, MMBSkillsAlternateY]
		 * cycling between all selected skills. Each is shown for 64 frames.
		 */

	//#define MMBEquippedWeaponSkill
		/*
		 * Draws the skill icon of the equipped weapon to
		 * [MMBEquippedItemSkillX, MMBEquippedItemSkillY] if the weapon
		 * has a skill.
		 */

// Skills options

	// Coordinates are in pixels

	#define MMBSkillObjectPaletteIndex 4
	#define MMBSkillTile 0x30C

	#define MMBSkillsX 120
	#define MMBSkillsY 8

	#define MMBSkill1X 120
	#define MMBSkill1Y 8

	#define MMBSkill2X 136
	#define MMBSkill2Y 8

	#define MMBSkill3X 152
	#define MMBSkill3Y 8

	#define MMBSkill4X 168
	#define MMBSkill4Y 8

	#define MMBSkill5X 174
	#define MMBSkill5Y 8

	#define MMBSkill6X 180
	#define MMBSkill6Y 8

	#define MMBSkillsAlternateX 120
	#define MMBSkillsAlternateY 8

	#define MMBEquippedItemSkillTileIndex 0x318

	#define MMBEquippedItemSkillX 8
	#define MMBEquippedItemSkillY 8

// Number modules

	#define MMBASNumber
	#define MMBATKNumber
	#define MMBAVONumber
	//#define MMBCHRNumber // Useless without skill system
	#define MMBCRTNumber
	#define MMBDEFNumber
	#define MMBDODNumber
	#define MMBEXPNumber
	#define MMBHITNumber
	#define MMBLevelNumber
	#define MMBRESNumber
	//#define MMBRTGNumber
	//#define MMBCurrentHPNumber
	//#define MMBMaxHPNumber
		/*
		 * Draws the number for the specified stat
		 * to [MMB(STAT)X, MMB(STAT)Y].
		 */

// Number options

	// Coordinates are in pixels
	// Coordinates are for the rightmost digit

	// AS Number
	#define MMBASX 138
	#define MMBASY 24

	// ATK Number
	#define MMBATKX 104
	#define MMBATKY 24

	// AVO Number
	#define MMBAVOX 138
	#define MMBAVOY 40

	// CHR Number
	#define MMBCHRX 96
	#define MMBCHRY 16

	// CRT Number
	#define MMBCRTX 104
	#define MMBCRTY 48

	// DEF Number
	#define MMBDEFX 104
	#define MMBDEFY 32

	// DOD Number
	#define MMBDODX 138
	#define MMBDODY 48

	// EXP number
	#define MMBEXPX 66
	#define MMBEXPY 32

	// HIT Number
	#define MMBHITX 104
	#define MMBHITY 40

	// Level number
	#define MMBLevelX 66
	#define MMBLevelY 24

	// RES number
	#define MMBRESX 138
	#define MMBRESY 32

	// RTG number
	#define MMBRTGX 103
	#define MMBRTGY 48

	// Current HP number
	#define MMBCurrentHPX 112
	#define MMBCurrentHPY 8

	// Max HP number
	#define MMBMaxHPX 112
	#define MMBMaxHPY 8

// Label modules

	#define MMBASLabel
	#define MMBATKLabel
	#define MMBAVOLabel
	//#define MMBCHRLabel
	#define MMBCRTLabel
	#define MMBDEFLabel
	#define MMBDODLabel
	#define MMBEXPLabel
	#define MMBHITLabel
	#define MMBLevelLabel
	#define MMBRESLabel
	//#define MMBRTGLabel
	//#define MMBHPLabel
		/*
		 * Draws the label for the specified stat
		 * to [MMB(STAT)LabelX, MMB(STAT)LabelY] using
		 * the palette index MMB(STAT)PaletteIndex.
		 */

// Label options

	// Coordinates are in 8x8 pixel tiles

	// AS label
	#define MMBASLabelX 14
	#define MMBASLabelY 3
	#define MMBASLabelVRAMTile 0x100
	#define MMBASLabelPaletteIndex 2
	#define MMBASLabelTileCount 2

	// ATK label
	#define MMBATKLabelX 10
	#define MMBATKLabelY 3
	#define MMBATKLabelVRAMTile 0x102
	#define MMBATKLabelPaletteIndex 2
	#define MMBATKLabelTileCount 2

	// AVO label
	#define MMBAVOLabelX 14
	#define MMBAVOLabelY 5
	#define MMBAVOLabelVRAMTile 0x104
	#define MMBAVOLabelPaletteIndex 2
	#define MMBAVOLabelTileCount 2

	// CHR label
	#define MMBCHRLabelX 9
	#define MMBCHRLabelY 2
	#define MMBCHRLabelVRAMTile 0x106
	#define MMBCHRLabelPaletteIndex 2
	#define MMBCHRLabelTileCount 2

	// CRT label
	#define MMBCRTLabelX 10
	#define MMBCRTLabelY 6
	#define MMBCRTLabelVRAMTile 0x108
	#define MMBCRTLabelPaletteIndex 2
	#define MMBCRTLabelTileCount 2

	// DEF label
	#define MMBDEFLabelX 10
	#define MMBDEFLabelY 4
	#define MMBDEFLabelVRAMTile 0x10A
	#define MMBDEFLabelPaletteIndex 2
	#define MMBDEFLabelTileCount 2

	// DOD label
	#define MMBDODLabelX 14
	#define MMBDODLabelY 6
	#define MMBDODLabelVRAMTile 0x10C
	#define MMBDODLabelPaletteIndex 2
	#define MMBDODLabelTileCount 2

	// EXP label
	#define MMBEXPLabelX 6
	#define MMBEXPLabelY 4
	#define MMBEXPLabelVRAMTile 0x160
	#define MMBEXPLabelPaletteIndex 2
	#define MMBEXPLabelTileCount 2

	// HIT label
	#define MMBHITLabelX 10
	#define MMBHITLabelY 5
	#define MMBHITLabelVRAMTile 0x10E
	#define MMBHITLabelPaletteIndex 2
	#define MMBHITLabelTileCount 2

	// Level label
	#define MMBLevelLabelX 5
	#define MMBLevelLabelY 3
	#define MMBLevelLabelVRAMTile 0x162
	#define MMBLevelLabelPaletteIndex 2
	#define MMBLevelLabelTileCount 2

	// RES label
	#define MMBRESLabelX 14
	#define MMBRESLabelY 4
	#define MMBRESLabelVRAMTile 0x164
	#define MMBRESLabelPaletteIndex 2
	#define MMBRESLabelTileCount 2

	// RTG label
	#define MMBRTGLabelX 9
	#define MMBRTGLabelY 6
	#define MMBRTGLabelVRAMTile 0x166
	#define MMBRTGLabelPaletteIndex 2
	#define MMBRTGLabelTileCount 2

	// HP label
	#define MMBHPLabelX 5
	#define MMBHPLabelY 3
	#define MMBHPLabelVRAMTile 0x120
	#define MMBHPLabelPaletteIndex 2
	#define MMBHPLabelTileCount 2

ALIGN 4

#include "../MMBCore.event"

MESSAGE MMB code ends at CURRENTOFFSET

#endif // MODULAR_MMB


